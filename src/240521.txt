https://teamsparta.notion.site/cc38b7ad3eb44c2b8b6b92028e695c78
스파르타 챌린지반 1일차 : 2024 05 21

[자바 메모리 관리]

프로세스 :
    프로그램을 실행해주는 주체
    작업의 단위
    자신 고유의 공간과 자원을 할당 받는다
쓰레드 :
    작업을 처리해주는 주체
    다른 쓰레드와 공간과 자원을 공유하면서 사용
    메인쓰레드, 요청쓰레드...
    프로세스 안에 여러 쓰레드가 실행된다

자바 애플리케이션 실행 명령어
    Java 애플리케이션을 실행할 때는 java 명령어를 사용합니다. 기본적인 실행 명령어는 다음과 같습니다:
        java [options] -jar <jar-file>
    cp 또는 classpath: 클래스 파일 또는 JAR 파일의 경로를 지정합니다.
    Xms<size>: JVM 초기 힙 메모리 크기를 지정합니다.
    Xmx<size>: JVM 최대 힙 메모리 크기를 지정합니다.
    XX:+UseG1GC: G1 Garbage Collector를 사용하도록 지정합니다. // 아무것도 안하는 쓰레드를 없앤다
    D<property>=<value>: 시스템 속성을 설정합니다.

스프링 애플리케이션 실행 명령어
    Spring Boot 애플리케이션은 독립 실행형 JAR 파일로 빌드되며, java -jar 명령어로 실행할 수 있습니다.
        java -jar <spring-boot-app>.jar
    -spring.profiles.active=<profile>: 활성화할 Spring 프로파일을 지정합니다.
    -server.port=<port>: 애플리케이션이 사용할 서버 포트를 지정합니다.
    -spring.config.location=<location>: 커스텀 설정 파일의 경로를 지정합니다.
    D<property>=<value>: Java 시스템 속성을 설정합니다.

JVM의 동작 원리 (JDK:개발환경, JRE:실행환경)
    1. 클래스 로딩: JVM은 애플리케이션의 바이트코드(.class 파일)를 메모리에 로드합니다.
    2. 바이트코드 검증: 로드된 바이트코드를 검증하여 안전성을 보장합니다.
    3. 바이트코드 실행: JIT(Just-In-Time) 컴파일러가 바이트코드를 기계어로 변환하여 실행합니다.
    4. 메모리 관리: JVM은 힙(heap) 메모리를 관리하며, 객체 생성과 메모리 할당/해제를 처리합니다.
        Java Heap 메모리
            Eden > S0(서바이버제로) > S1(서바이버원) > Old Memory > Perm
            Eden : 젊은 객체가 할당된 공간 > 여기에서 오랬동안 유지된 모든 객체는 Old 영역으로 상승하고
                일 안하는 애는 지워진다 : 가비지컬렉션은 마이너 GC라고 불린다
            Old Memory : 늙은 객체 영역
                올드메모리가 가득 차면 가비지컬력션(메이저GC)가 실행된다   // 따라서 기간은 불규칙적이다

GC(Garbage Collection)의 동작 방식
    Serial GC : 단일 쓰레드로 GC 작업 수행
        장점 : 구현 간단, 단일쓰레드 애플리케이션에 적합
        단점 : 멀티코어 시스템에서 성능이 낮다. stop-the-world 시간이 길어질수 있다.   // 메모리가 가득 찼을때 GC가 도느라 멈춰있는 상태
    Parallel GC : 여러 쓰레드를 사용하여 "GC 작업을 병렬" 로 수행합니다.
        장점 : 멀티코어 시스템에서 성능이 향상
        단점 : 여전히 stop-the-world 현상이 발생
    CMS (Concurrent Mark-Sweep) GC : 애플리케이션 쓰레드와 병행하여 GC 작업을 수행
        장점 : stop-the-world 시간을 줄인다
        단점 : 메모리 파편화(fragmentation)가 발생할 수 있으며, 복잡도가 높다
            파편화 이미지 : https://velog.velcdn.com/images/hkh1213/post/d60dc93f-7fb9-427d-916a-0811dbf8bebc/image.png
    G1 (Garbage-First) GC : 힙을 여러 영역으로 나누어 병렬로 GC를 수행하며, 필요한 영역을 우선적으로 정리합니다.
        장점 : 예측 가능한 짧은 stop-the-world 시간을 제공
        단점 : 설정과 튜닝이 복잡
        * G1GC 를 가장 많이 사용한다 *

